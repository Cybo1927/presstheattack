# Collection of scriptlets to be used for injection/redirection on specific domains.
# Most of these scriptlets have been stolen by me from here https://github.com/uBlock-user/uBO-Scriptlets/

# eval-logger
# example.com##+js(eval-logger)
eval-logger.js application/javascript
(() => {
	'use strict';
	let z = window.eval,
		log = console.log.bind(console);
	window.eval = function(a) {
		log('uBO: eval("%s")', String(a));
		return z.apply(this, arguments);
	}.bind(window);
})();

# autoplay-blocker
autoplay-defuser.js application/javascript
(() => {
    'use strict';
    const autoplay = function(ev) {
        if (ev) {
            window.removeEventListener(ev.type, autoplay, true);
        }
        try {
            const media = HTMLMediaElement;
            media.autoplay = 'false';
        } catch (ex) {}
    };
    if (document.readyState === 'loading') {
        window.addEventListener('DOMContentLoaded', autoplay, true);
    } else {
        autoplay();
    }
})();

# element-clicker
eclick.js application/javascript
(() => {
    'use strict';
    let selector = '{{1}}';
    if (selector === '' || selector === '{{1}}') {
        return;
    }
    const click = function(ev) {
        if (ev) {
            window.removeEventListener(ev.type, click, true);
        }
        try {
            const element = document.querySelector(selector);
            element.click();
        } catch (ex) {}
    };
    if (document.readyState === 'interactive') {
        window.addEventListener('DOMContentLoaded', click, true);
    } else {
        click();
    }
})();

# element-clicker-onload
eclick2.js application/javascript
(() => {
    'use strict';
    let selector = '{{1}}';
    if (selector === '' || selector === '{{1}}') {
        return;
    }
    let click = () => {
        let element = document.querySelector(selector);
        element.click();
    };
    if (document.readyState === 'complete') {
        click();
    } else {
        addEventListener('load', click);
    }
})();

# decodeURIComponent-defuser
noduc.js application/javascript
(() => {
    let needle = '{{1}}';
    if (needle === '' || needle === '{{1}}') {
        needle = '.?';
    } else if (needle.slice(0, 1) === '/' && needle.slice(-1) === '/') {
        needle = needle.slice(1, -1);
    } else {
        needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }
    needle = new RegExp(needle);
    realnoduc = window.decodeURIComponent;
    window.decodeURIComponent = function(a) {
        if (!needle.test(a.toString())) {
            realnoduc.call(window, a);
        }
    }.bind(window);
})();

# decodeURIComponent-logger
duc-logger.js application/javascript
(() => {
    let z = window.decodeURIComponent,
        log = console.log.bind(console);
    window.decodeURIComponent = function(a) {
        log('uBO: decodeURIComponent("%s")', a.toString());
        return z.apply(this, arguments);
    }.bind(window);
})();

# encodeURIComponent-defuser
noeuc.js application/javascript
(() => {
    let needle = '{{1}}';
    if (needle === '' || needle === '{{1}}') {
        needle = '.?';
    } else if (needle.slice(0, 1) === '/' && needle.slice(-1) === '/') {
        needle = needle.slice(1, -1);
    } else {
        needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }
    needle = new RegExp(needle);
    realnoeuc = window.encodeURIComponent;
    window.encodeURIComponent = function(a) {
        if (!needle.test(a.toString())) {
            realnoeuc.call(window, a);
        }
    }.bind(window);
})();

# encodeURIComponent-logger
euc-logger.js application/javascript
(() => {
    let z = window.encodeURIComponent,
        log = console.log.bind(console);
    window.encodeURIComponent = function(a) {
        log('uBO: encodeURIComponent("%s")', a.toString());
        return z.apply(this, arguments);
    }.bind(window);
})();

# parseInt-defuser
nopi.js application/javascript
(() => {
    let needle = '{{1}}';
    if (needle === '' || needle === '{{1}}') {
        needle = '.?';
    } else if (needle.slice(0, 1) === '/' && needle.slice(-1) === '/') {
        needle = needle.slice(1, -1);
    } else {
        needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }
    needle = new RegExp(needle);
    realnopi = window.parseInt;
    window.parseInt = function(a) {
        if (!needle.test(String(a))) {
            realnopi.call(window, a);
        }
    }.bind(window);
})();

# parseInt-logger
nopi-logger.js application/javascript
(() => {
	let z = window.parseInt,
		log = console.log.bind(console);
	window.parseInt = function(a) {
		log('uBO: parseInt("%s")', String(a));
		return z.apply(this, arguments);
	}.bind(window);
})();

# String.fromCharCode-defuser
schar.js application/javascript
(() => {
    let needle = '{{1}}';
    if (needle === '' || needle === '{{1}}') {
        needle = '.?';
    } else if (needle.slice(0, 1) === '/' && needle.slice(-1) === '/') {
        needle = needle.slice(1, -1);
    } else {
        needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }
    needle = new RegExp(needle);
    realschar = window.String.fromCharCode;
    window.String.fromCharCode = function(a) {
        if (!needle.test(String(a))) {
            realschar.call(window, a);
        }
    }.bind(window);
})();

# String.fromCharCode-logger
schar-logger.js application/javascript
(() => {
    let z = window.String.fromCharCode,
        log = console.log.bind(console);
    window.String.fromCharCode = function(a) {
        log('uBO: String.fromCharCode("%s")', String(a));
        return z.apply(this, arguments);
    }.bind(window);
})();

# String.prototype.charCodeAt-defuser
stcharat-defuser.js application/javascript
(() => {
    let needle = '{{1}}';
    if (needle === '' || needle === '{{1}}') {
        needle = '.?';
    } else if (needle.slice(0, 1) === '/' && needle.slice(-1) === '/') {
        needle = needle.slice(1, -1);
    } else {
        needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }
    needle = new RegExp(needle);
    realstcharat = window.String.prototype.charCodeAt;
    window.String.prototype.charCodeAt = function(a) {
        if (!needle.test(String(a))) {
            realstcharat.call(window, a);
        }
    }.bind(window);
})();

# String.prototype.charCodeAt-logger
stcharat-logger.js application/javascript
(() => {
    let z = window.String.prototype.charCodeAt,
        log = console.log.bind(console);
    window.String.prototype.charCodeAt = function(a) {
        log('uBO: String.prototype.charCodeAt("%s")', String(a));
        return z.apply(this, arguments);
    }.bind(window);
})();

# document.write-defuser
dwrite.js application/javascript
(() => {
    let needle = '{{1}}';
    if (needle === '' || needle === '{{1}}') {
        needle = '.?';
    } else if (needle.slice(0, 1) === '/' && needle.slice(-1) === '/') {
        needle = needle.slice(1, -1);
    } else {
        needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }
    needle = new RegExp(needle);
    rdwrite = document.write.bind(document);
    window.document.write = function(a) {
        if (!needle.test(String(a))) {
            rdwrite.call(window, a);
        }
    }.bind(window);
})();

# document.write-logger
dwrite-logger.js application/javascript
(() => {
    let z = window.document.write.bind(document),
        log = console.log.bind(console);
    window.document.write = function(a) {
        log('uBO: document.write("%s")', String(a));
        return z.apply(this, arguments);
    }.bind(window);
})();

# document.createElement-logger
dce-logger.js application/javascript
(() => {
	let z = window.document.createElement.bind(document),
		log = console.log.bind(console);
	window.document.createElement = function(a) {
		log('uBO: document.createElement("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# document.getElementsByName-logger
dgebn-logger.js application/javascript
(() => {
	let z = window.document.getElementsByName.bind(document),
		log = console.log.bind(console);
	window.document.getElementsByName = function(a) {
		log('uBO: document.getElementsByName("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# document.getElementsByTagName-logger
dgebtn-logger.js application/javascript
(() => {
	let z = window.document.getElementsByTagName.bind(document),
		log = console.log.bind(console);
	window.document.getElementsByTagName = function(a) {
		log('uBO: document.getElementsByTagName("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# atob-defuser
noatob.js application/javascript
(() => {
    let needle = '{{1}}';
    if (needle === '' || needle === '{{1}}') {
        needle = '.?';
    } else if (needle.slice(0, 1) === '/' && needle.slice(-1) === '/') {
        needle = needle.slice(1, -1);
    } else {
        needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }
    needle = new RegExp(needle);
    realNoAtob = window.atob;
    window.atob = function(a) {
        if (!needle.test(a.toString())) {
            realNoAtob.call(window, a);
        }
    }.bind(window);
})();

# atob-logger
atob-logger.js application/javascript
(() => {
    let z = window.atob,
        log = console.log.bind(console);
    window.atob = function(a) {
        log('uBO: atob("%s")', a.toString());
        return z.apply(this, arguments);
    }.bind(window);
})();

# MouseClick-defuser
mousedef.js application/javascript
(() => {
    'use strict';
    document.body.removeAttribute('oncontextmenu');
    document.body.removeAttribute('oncopy');
    document.body.removeAttribute('onselectstart');
    document.body.removeAttribute('ondragstart');
    document.oncontextmenu=null;
    document.oncopy=null;
    document.onselectstart=null;
    document.ondragstart=null;
})();

# btoa-defuser
nobtoa.js application/javascript
(() => {
	let needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	realNoBtoa = window.btoa;
	window.btoa = function(a) {
		if ( !needle.test(a.toString()) ) {
			realNoBtoa.call(window, a);
		}
	}.bind(window);
})();

# btoa-logger
btoa-logger.js application/javascript
(() => {
	let z = window.btoa,
		log = console.log.bind(console);
	window.btoa = function(a) {
		log('uBO: btoa("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# window.alert-defuser
alt.js application/javascript
(() => {
	let needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	ralt = window.alert;
	window.alert = function(a) {
		if ( !needle.test(a.toString()) ) {
			ralt.call(window, a);
		}
	}.bind(window);
})();

# window.alert-logger
alt-logger.js application/javascript
(() => {
	let z = window.alert,
		log = console.log.bind(console);
	window.alert = function(a) {
		log('uBO: window.alert("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();


# readOnly-property-setter
# example.com##+js(ro, canAds|runAds, true)
ro.js application/javascript
(() => {
    'use strict';
    const prop = '{{1}}';
    if (prop === '' || prop === '{{1}}') {
        return;
    }
    const props = prop.split(/\s*\|\s*/);
    const ro = ev => {
        if (ev) {
            window.removeEventListener(ev.type, ro, true);
        }
        try {
            for (const propsetter of props) {
                Reflect.defineProperty(window, propsetter, {
                    value: '{{2}}'
                });
            }
        } catch (ex) {}
    };
    if (document.readyState === 'loading') {
        window.addEventListener('DOMContentLoaded', ro, true);
    } else {
        ro();
    }
})();