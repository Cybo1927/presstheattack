# Collection of scriptlets to be used for injection/redirection on specific domains.
# It was all stolen by me from here - https://github.com/uBlock-user/uBO-Scriptlets/

# autoplay-blocker
# example.com##+js(autoplay-defuser)
autoplay-defuser.js application/javascript
(() => {
	      'use strict';
	      const autoplay = function(ev) {  
		  				if (ev) { window.removeEventListener(ev.type, autoplay, true); }
						try {
							const media = HTMLMediaElement;
							media.autoplay = 'false';
						} catch(ex) {
						}
	      };
	      if (document.readyState === 'loading') {
		      window.addEventListener('DOMContentLoaded', autoplay, true);
	      } else {
		      autoplay();
	      }
})();

# element-clicker
# example.com##+js(eclick, #example)
eclick.js application/javascript
(() => {
		'use strict';
		let selector = '{{1}}';
		if ( selector === '' || selector === '{{1}}' ) {
			return;
		}
		const click = function(ev) {
						if (ev) { window.removeEventListener(ev.type, click, true); }
						try {
							const element = document.querySelector(selector);
							element.click();
						} catch(ex) {
						}
		};
		if ( document.readyState === 'interactive') {
			 window.addEventListener('DOMContentLoaded', click, true);
		} else {
			 click();
		}
})();

# element-clicker-onload
# example.com##+js(eclick2, .example)
eclick2.js application/javascript
(() => {
		'use strict';
		 let selector = '{{1}}';
			if ( selector === '' || selector === '{{1}}' ) {
			return;
		}
		 let click = () => {
			let element = document.querySelector(selector);
			element.click();
		};
		if (document.readyState === 'complete') {
			click();
		} else {
			addEventListener('load', click);
		}
})();

# decodeURIComponent-defuser
noduc.js application/javascript
(function() {
	let needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	realnoduc = window.decodeURIComponent;
	window.decodeURIComponent = function(a) {
		if ( !needle.test(a.toString()) ) {
			realnoduc.call(window, a);
		}
	}.bind(window);
})();

# decodeURIComponent-logger
duc-logger.js application/javascript
(function() {
	let z = window.decodeURIComponent,
		log = console.log.bind(console);
	window.decodeURIComponent = function(a) {
		log('uBO: decodeURIComponent("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# encodeURIComponent-defuser
noeuc.js application/javascript
(function() {
	let needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	realnoeuc = window.encodeURIComponent;
	window.encodeURIComponent = function(a) {
		if ( !needle.test(a.toString()) ) {
			realnoeuc.call(window, a);
		}
	}.bind(window);
})();

# encodeURIComponent-logger
euc-logger.js application/javascript
(function() {
	let z = window.encodeURIComponent,
		log = console.log.bind(console);
	window.encodeURIComponent = function(a) {
		log('uBO: encodeURIComponent("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();